Examples:
 stringbuilder
 deploymentConfigurationbuilder (https://dotnettutorials.net/lesson/builder-design-pattern-real-time-example/)
 requestbuilder (https://www.linkedin.com/pulse/design-patterns-real-examples-go-part-1-builder-leonardo-araujo)

Theory:
 Отделяет конструирование сложного объекта от его представления так, что в результате одного и того же 
 процесса конструирования могут получаться разные представления. 

 позволяет изменять внутреннее представление продукта;
 изолирует код, реализующий конструирование и представление;
 дает более тонкий контроль над процессом конструирования.

 алгоритм создания сложного объекта не должен зависеть от того, из каких частей состоит объект и как они стыкуются между собой;
 процесс конструирования должен обеспечивать различные представления конструируемого объекта.

 Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово. 
 Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.

 Многие архитектуры начинаются с применения Фабричного метода (более простого и расширяемого через подклассы) 
 и эволюционируют в сторону Абстрактной фабрики, Прототипа или Строителя (более гибких, но и более сложных).
 Строитель концентрируется на построении сложных объектов шаг за шагом. Абстрактная фабрика специализируется на создании семейств связанных продуктов. 
 Строитель возвращает продукт только после выполнения всех шагов, а Абстрактная фабрика возвращает продукт сразу же.
 Строитель позволяет пошагово сооружать дерево Компоновщика.
 Паттерн Строитель может быть построен в виде Моста: директор будет играть роль абстракции, а строители — реализации.
 Абстрактная фабрика, Строитель и Прототип могут быть реализованы при помощи Одиночки.